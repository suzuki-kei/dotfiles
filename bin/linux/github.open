#!/usr/bin/env bash

source "$(dirname -- "${BASH_SOURCE[0]}")/../_internal"

declare -gr EXIT_STATUS_SUCCESS=0
declare -gr EXIT_STATUS_INVALID_ARGUMENT=1

declare -gr USAGE=`cat <<EOS | strip_heredoc
    NAME
        ${SCRIPT_NAME} - open git remote in browser

    SYNOPSIS
        ${SCRIPT_NAME} [PATH]

    DESCRIPTION
        Open git remote in browser.

        PATH
            The file/directory path in cloned git repository from GitHub.

    ENVIRONMENT VARIABLES
        GITHUB_OPEN_COMMAND
            The command used to open url. (default is "open")

    EXIT STATUS
        ${EXIT_STATUS_SUCCESS} if success.
        ${EXIT_STATUS_INVALID_ARGUMENT} if the argument is invalid.
EOS`

function main
{
    parse_options "$@"
    set -- "${OPTION_ARGS[@]}"

    if ${OPTION_HELP}; then
        print_help
        exit ${EXIT_STATUS_SUCCESS}
    fi

    open_git_remote_in_browser "$@"
    exit ${EXIT_STATUS_SUCCESS}
}

function print_help
{
    echo "${USAGE}" | less -F
}

function parse_options
{
    declare option

    while getopts 'h' option
    do
        case "${option}" in
            h)
                OPTION_HELP=true
                ;;
            *)
                print_help
                exit ${EXIT_STATUS_INVALID_ARGUMENT}
                ;;
        esac
    done

    shift $((OPTIND - 1))
    declare -agr OPTION_ARGS=("$@")
    declare -gr OPTION_HELP=${OPTION_HELP:-false}

    if [[ $# -gt 1 ]]; then
        echo "illegal option(s) -- $@" >&2
        exit ${EXIT_STATUS_INVALID_ARGUMENT}
    fi
}

function open_git_remote_in_browser
{
    declare path
    path="${1:-$(pwd)}"

    declare command
    command="$(make_open_command "${path}")"

    eval "${command}"
}

function make_open_command
{
    declare path
    if [[ -z "${1:-}" ]]; then
        path="$(pwd)"
    else
        path="$(realpath -- "$1")"
    fi

    declare repository_dir
    if [[ -d "${path}" ]]; then
        repository_dir="$(git -C "${path}" rev-parse --show-toplevel)"
    else
        repository_dir="$(git -C "$(dirname "${path}")" rev-parse --show-toplevel)"
    fi

    declare relative_path
    if [[ "${path}" == "${repository_dir}" ]]; then
        relative_path=''
    else
        relative_path="$(realpath --relative-to "${repository_dir}" "${path}")"
    fi

    declare git_branch_name
    git_branch_name="$(git -C "${repository_dir}" branch --show-current)"

    declare git_remote_url
    git_remote_url="$(to_git_remote_url_from_repository_dir "${repository_dir}")"

    declare github_url
    if [[ -z "${relative_path}" ]]; then
        github_url="$(to_github_url_from_git_remote_url "${git_remote_url}")"
    else
        github_url="$(to_github_url_from_git_remote_url "${git_remote_url}")/tree/${git_branch_name}/${relative_path}"
    fi

    declare open_command
    open_command="$(to_open_command_from_github_url "${github_url}")"

    echo "${open_command}"
}

function to_git_remote_url_from_repository_dir
{
    declare -r repository_dir="$1"
    git -C "${repository_dir}" remote get-url origin
}

function to_github_url_from_git_remote_url
{
    declare -r git_remote_url="$1"

    if [[ ${git_remote_url} =~ ^git@github.com:(.+)/(.+).git$ ]]; then
        echo "https://github.com/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}"
    elif [[ ${git_remote_url} =~ ^https://github.com/(.+)/(.+).git$ ]]; then
        echo "https://github.com/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}"
    else
        echo "illegal option(s) -- $@" >&2
        exit ${EXIT_STATUS_INVALID_ARGUMENT}
    fi
}

function to_open_command_from_github_url
{
    declare -r github_url="$1"
    echo "${GITHUB_OPEN_COMMAND:-open} '${github_url}'"
}

if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
    main "$@"
fi

