#!/bin/bash

# ------------------------------------------------------------------------------
#  Bash Settings (general)
# ------------------------------------------------------------------------------

export TZ='Asia/Tokyo'
export PAGER=less
export EDITOR=vi
export PS1='$ '

# ------------------------------------------------------------------------------
#  Bash Settings (history command)
# ------------------------------------------------------------------------------

export HISTSIZE=7777777
export HISTFILESIZE=7777777
export HISTTIMEFORMAT="%Y-%m-%d %T "
export HISTCONTROL=ignoredups

# ------------------------------------------------------------------------------
#  Aliases (ls command)
# ------------------------------------------------------------------------------

alias ls='\ls --time-style=long-iso'
alias ll='ls -lhp'
alias la='ll -a'

# ------------------------------------------------------------------------------
#  Custom Commands
# ------------------------------------------------------------------------------

export PATH="$(cd $(dirname $BASH_SOURCE); pwd)/scripts:$PATH"

# クリップボードとコマンド履歴を消去する.
function clear_history
{
    history -cw

    if $(which pbcopy > /dev/null); then
        echo -n | pbcopy
    fi

    if $(screen -ls | grep -F '(Attached)' > /dev/null); then
        local -r sockname=$(screen -ls | grep -F "(Attached)" | cut -f2)
        screen -S "${sockname}" -X scrollback 0
        screen -S "${sockname}" -X source ~/.screenrc
        screen -S "${sockname}" -X register . ''
    fi

    \clear
}

# date の出力形式を変更する.
function date_with_defaults
{
    if [ $# == 0 ]; then
        date "+%Y-%m-%d %H:%M:%S %Z"
    else
        date "$@"
    fi
}
alias date=date_with_defaults

# screen の重複実行を防止する.
function screen_with_double_execution_prevention
{
    if [[ $# == 0 && "${TERM}" == "screen" ]]; then
        echo "screen is already running."
    else
        \screen "$@"
    fi
}
alias screen=screen_with_double_execution_prevention

# ------------------------------------------------------------------------------
#  Homebrew
# ------------------------------------------------------------------------------

# see https://github.com/Homebrew/brew/blob/master/docs/Analytics.md
export HOMEBREW_NO_ANALYTICS=1

# brew install bash-completion
if [[ -f "/usr/local/etc/bash_completion" ]]; then
    source "/usr/local/etc/bash_completion"
fi

# brew install coreutils
if [[ -d "/usr/local/opt/coreutils/libexec/gnubin" ]]; then
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
fi

# brew install findutils
if [[ -d "/usr/local/opt/findutils/libexec/gnubin" ]]; then
    export PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
    export MANPATH="/usr/local/opt/findutils/libexec/gnuman"
fi

# brew install gnu-sed
if [[ -d "/usr/local/opt/gnu-sed/libexec/gnubin" ]]; then
    export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
    export MANPATH="/usr/local/opt/gnu-sed/libexec/gnuman"
fi

# brew install gawk
if [[ -d "/usr/local/opt/gawk/libexec/gnubin/" ]]; then
    export PATH="/usr/local/opt/gawk/libexec/gnubin:$PATH"
    export MANPATH="/usr/local/opt/gawk/libexec/gnuman"
fi

# brew install grep
if [[ -d "/usr/local/opt/grep/libexec/gnubin" ]]; then
    export PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
    export MANPATH="/usr/local/opt/grep/libexec/gnuman:$MANPATH"
fi

# brew install gauche
if which gosh > /dev/null; then
    if which rlwrap > /dev/null; then
        alias gosh='rlwrap gosh'
    fi
fi

# brew install python@3.10
if [[ -d "/usr/local/opt/python@3.10/bin" ]]; then
    export PATH="/usr/local/opt/python@3.10/bin:$PATH"
    export LDFLAGS="-L/usr/local/opt/python@3.10/lib"
    export PKG_CONFIG_PATH="/usr/local/opt/python@3.10/lib/pkgconfig"
fi

# brew install rbenv
if [[ -d "$HOME/.rbenv/shims" ]]; then
    export PATH="$HOME/.rbenv/shims:$PATH"
fi

