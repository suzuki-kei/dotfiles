#!/usr/bin/env bash

set -eu -o pipefail

declare -gr NAME="$(basename "${BASH_SOURCE}")"
declare -gr BASE_DIR="$(cd "$(dirname "${BASH_SOURCE}")" && pwd)"
source "${BASE_DIR}/_internal"

declare -gr EXIT_STATUS_SUCCESS=0
declare -gr EXIT_STATUS_INVALID_ARGUMENT=1

declare -gr USAGE=`cat <<EOS | strip_heredoc
    NAME
        ${NAME} - extract usage from Makefile comments

    SYNOPSIS
        ${NAME} [OPTION...] [FILE...]

    DESCRIPTION
        Extract usage from Makefile comments.

        Reads the input from pipe, if any.
        Reads the input from FILE, if any.

    OPTIONS
        -h
            Print the help message.

    EXIT STATUS
        ${EXIT_STATUS_SUCCESS} if successfly.
        ${EXIT_STATUS_INVALID_ARGUMENT} if the argument is invalid.

    EXAMPLE
        Here is how to give input from pipe.

            cat Makefile | ${NAME}

        Here is how to give input from file.

            ${NAME} Makefile

        It's useful to define a rule named "help" in your Makefile like this.

            help: # Print description of each rule.
                ${NAME} \\$(MAKEFILE_LIST)

            build: # Build a artifact.
                ...

            clean: # Remove all intermediate files.
                ...
EOS`

function main
{
    parse_options "$@"
    set -- "${OPTION_ARGS[@]}"

    if ${OPTION_HELP}; then
        print_help
        exit ${EXIT_STATUS_SUCCESS}
    fi

    extract_usage_from_makefile "$@"
    exit ${EXIT_STATUS_SUCCESS}
}

function print_help
{
    echo "${USAGE}"
}

function parse_options
{
    while getopts 'h' OPTION
    do
        case "${OPTION}" in
            h)
                OPTION_HELP=true
                ;;
            *)
                print_help
                exit ${EXIT_STATUS_INVALID_ARGUMENT}
                ;;
        esac
    done

    shift $((OPTIND - 1))
    declare -agr OPTION_ARGS=("$@")
    declare -gr OPTION_HELP=${OPTION_HELP:-false}
}

function extract_usage_from_makefile
{
    read_makefile "$@" \
        | sed -nr 's/^([a-zA-Z0-9][a-zA-Z0-9_.-]*):[^#]*#? *(.*)$/\1\t\2/p' \
        | column -s '	' -t
}

function read_makefile
{
    if [[ -p /dev/stdin ]]; then
        cat
    fi

    if [[ $# != 0 ]]; then
        cat "$@"
    fi
}

if [[ "$0" == "${BASH_SOURCE}" ]]; then
    main "$@"
fi

