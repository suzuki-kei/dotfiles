#!/usr/bin/env bash

source "$(dirname -- "${BASH_SOURCE[0]}")/_internal"

declare -gr DOCKER_IMAGE_NAME="${SCRIPT_NAME}:latest"
declare -gr DOCKERFILE_DIR="${SCRIPT_DIR}/../dockerfiles/${SCRIPT_NAME}"

declare -gr EXIT_STATUS_SUCCESS=0
declare -gr EXIT_STATUS_INVALID_ARGUMENT=1

declare -gr USAGE=`cat <<EOS | strip_heredoc
    NAME
        ${SCRIPT_NAME} - operates ${SCRIPT_NAME} docker image

    SYNOPSIS
        ${SCRIPT_NAME} [OPTION...] [SUBCOMMAND]

    DESCRIPTION
        Operates the ${DOCKER_IMAGE_NAME} docker image.

        if SUBCOMMAND is omit, the default is 'run'.
        see SUBCOMMANDS section for details.

    OPTIONS
        -h, --help
            Print the help message.

    SUBCOMMANDS
        build
            Build docker image.

        help
            Print the help message.

        rmi
            Remove docker image.

        run [DIR] [--ro|--rw]
            Run docker container.
            Mount the DIR on container if any one option is specified.
            DIR is source directory to mount. (default is .)
            To mount as readonly, specify --ro or omit.
            To mount as writable, specify --rw.
            If no option is specified, run docker container without mounting.

    EXIT STATUS
        ${EXIT_STATUS_SUCCESS} if success.
        ${EXIT_STATUS_INVALID_ARGUMENT} if the argument is invalid.
EOS`

function main
{
    parse_options "$@"
    set -- "${OPTION_ARGS[@]}"

    if ${OPTION_HELP}; then
        print_help
        exit ${EXIT_STATUS_SUCCESS}
    fi

    subcommand_${OPTION_SUBCOMMAND} "$@"
    exit ${EXIT_STATUS_SUCCESS}
}

function print_help
{
    echo "${USAGE}" | less -F
}

function parse_options
{
    # detect subcommand
    if [[ $# != 0 ]]; then
        case "$1" in
            build | help | rmi | run)
                OPTION_SUBCOMMAND="$1"
                shift
                ;;
            *)
                OPTION_SUBCOMMAND='run'
                ;;
        esac
    fi

    declare option
    declare -a OPTION_ARGS=()

    # parse remaining arguments
    for option in "$@"
    do
        case "${option}" in
            -h | --help)
                OPTION_HELP=true
                ;;
            --ro | --rw)
                OPTION_MOUNT_VOLUME="${option#--}"
                ;;
            -*)
                echo "illegal option(s) -- $@" >&2
                exit ${EXIT_STATUS_INVALID_ARGUMENT}
                ;;
            *)
                OPTION_ARGS+=("${option}")
                ;;
        esac
    done

    declare -agr OPTION_ARGS=("${OPTION_ARGS[@]}")
    declare -gr OPTION_HELP=${OPTION_HELP:-false}
    declare -gr OPTION_SUBCOMMAND=${OPTION_SUBCOMMAND:-run}
    declare -gr OPTION_MOUNT_VOLUME=${OPTION_MOUNT_VOLUME:-}

    if [[ "${OPTION_SUBCOMMAND}" != 'run' ]] && [[ ${#OPTION_ARGS[@]} != 0 ]]; then
        echo "illegal option(s) -- $@" >&2
        exit ${EXIT_STATUS_INVALID_ARGUMENT}
    fi
}

function subcommand_build
{
    declare -r work_dir="${DOCKERFILE_DIR}/files"
    declare -r dotfiles_target_dir="${work_dir}/dotfiles"
    declare -r dotfiles_source_dir="${SCRIPT_DIR}/../dotfiles"

    mkdir -p "${dotfiles_target_dir}"

    cp -p \
        "${dotfiles_source_dir}/.bash_profile" \
        "${dotfiles_source_dir}/.bashrc" \
        "${dotfiles_source_dir}/.bashrc.functions" \
        "${dotfiles_source_dir}/.vimrc" \
        "${dotfiles_target_dir}"

    export DOCKER_SCAN_SUGGEST=false
    docker build -t "${DOCKER_IMAGE_NAME}" "${DOCKERFILE_DIR}"

    rm -rf "${work_dir}"
}

function subcommand_help
{
    print_help
}

function subcommand_rmi
{
    if docker images --format '{{.Repository}}:{{.Tag}}' | grep -E "^${DOCKER_IMAGE_NAME}\$"; then
        docker rmi "${DOCKER_IMAGE_NAME}"
    fi
}

function subcommand_run
{
    declare source
    declare target
    declare mount_option
    declare volume_option
    declare workdir_option

    if [[ $# == 0 ]] && [[ "${OPTION_MOUNT_VOLUME}" == '' ]]; then
        volume_option=''
        workdir_option=''
    else
        source="$(cd "${1:-.}" && pwd)"
        target='/root/workspace'
        mount_option="${OPTION_MOUNT_VOLUME:-ro}"
        volume_option="--volume ${source}:${target}:${mount_option}"
        workdir_option="--workdir ${target}"
    fi

    docker run -it --rm ${volume_option} ${workdir_option} "${DOCKER_IMAGE_NAME}" || true
}

if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
    main "$@"
fi

