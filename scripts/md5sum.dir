#!/bin/bash

set -eu -o pipefail

declare -gr NAME="$(basename "${BASH_SOURCE[0]}")"
declare -gr BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${BASE_DIR}/_internal.sh"

declare -gr EXIT_STATUS_SUCCESS=0
declare -gr EXIT_STATUS_INVALID_ARGUMENT=1

declare -gr USAGE=`cat <<EOS | strip_heredoc
    NAME
        ${NAME} - print md5 of directory

    SYNOPSIS
        ${NAME} [OPTION...] [PATH]

    DESCRIPTION
        Print md5 of directory.

        PATH is the root directory to scan (default is pwd).

    OPTIONS
        -h
            Print the help message.

        -v
            Print message verbosely.

    EXIT STATUS
        ${EXIT_STATUS_SUCCESS} if successfly.
        ${EXIT_STATUS_INVALID_ARGUMENT} if the argument is invalid.
EOS`

function main
{
    parse_options "$@"
    set -- "${OPTION_ARGS[@]}"

    if ${OPTION_HELP}; then
        print_help
        exit ${EXIT_STATUS_SUCCESS}
    fi

    generate_hash_value "${1:-.}"
    exit ${EXIT_STATUS_SUCCESS}
}

function print_help
{
    echo "${USAGE}"
}

function parse_options
{
    while getopts 'hv' OPTION
    do
        case "${OPTION}" in
            h)
                OPTION_HELP=true
                ;;
            v)
                OPTION_VERBOSE=true
                ;;
            *)
                print_help
                exit ${EXIT_STATUS_INVALID_ARGUMENT}
                ;;
        esac
    done

    shift $((OPTIND - 1))
    declare -agr OPTION_ARGS=("$@")
    declare -gr OPTION_HELP=${OPTION_HELP:-false}
    declare -gr OPTION_VERBOSE=${OPTION_VERBOSE:-false}

    if [[ $# -gt 1 ]]; then
        echo "illegal option(s) -- $@" >&2
        exit ${EXIT_STATUS_INVALID_ARGUMENT}
    fi
}

#
# Generates hash value of directory.
#
# Examples:
#     3727f5641d851ac05d2c90cfcbc2588b example
#
# Globals:
#     OPTION_VERBOSE: if true print message verbosely. default false.
#
# Arguments:
#     $1: Target directory path. default is pwd.
#
function generate_hash_value
{
    declare path="${1:-.}"
    declare hash=$(md5sum <(generate_hash_source "${path}") | cut -d' ' -f1)

    echo "${hash} ${path}"

    if ${OPTION_VERBOSE}; then
        generate_hash_source "${path}"
    fi
}

#
# Generates lines to use for hash.
#
# Each line contains follow values.
#
#     HASH_VALUE PERMISSION PATH
#
# Examples:
#     8cf8463b34caa8ac871a52d5dd7ad1ef drwxr-xr-x .
#     c223e5fce39cc89525a4c0f2cb90bb1c drwxr-xr-x ./one
#     5aa740ecc1f9aca4c0dbcc87214fcf44 drwxr-xr-x ./two
#
# Arguments:
#     $1: Target directory path. default is pwd.
#
function generate_hash_source
{
    (
        declare -r root_dir="${1:-.}"
        cd "${root_dir}"

        while read -r -d $'\0' path
        do
            if [[ -d "${path}" ]]; then
                declare hash=$(cat <(echo "${path}") | md5sum | cut -d' ' -f1)
            else
                declare hash=$(cat "${path}" | md5sum | cut -d' ' -f1)
            fi
            declare permission=$(stat -c '%A' "${path}")
            echo "${hash} ${permission} ${path}"
        done < <(find . -print0 | sort -dz)
    )
}

if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
    main "$@"
fi

