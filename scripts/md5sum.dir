#!/bin/bash

set -eu -o pipefail

declare -r ROOT_DIR="$(cd "$(dirname "$0")/.." && pwd)"
declare -r SCRIPTS_DIR="${ROOT_DIR}/scripts"
source "${SCRIPTS_DIR}/_internal.sh"

readonly EXIT_STATUS_SUCCESS=0

readonly EXIT_STATUS_INVALID_ARGUMENT=255

readonly USAGE=`cat <<EOS | _strip_heredoc
    NAME
        $(basename "$0") - Show hash code of directory tree.

    SYNOPSIS
        $(basename "$0") -h
        $(basename "$0") [-v] [PATH]

    DESCRIPTION
        $(basename "$0") - Show hash code of directory tree.
        PATH is the root directory to scan (default is pwd).

    OPTIONS
        -h
            Show usage and exit.

        -v
            Show message verbosely.

    EXIT STATUS
        ${EXIT_STATUS_SUCCESS} if successfly.
        ${EXIT_STATUS_INVALID_ARGUMENT} if the argument is invalid.
EOS`

#
# Entry point.
#
#     1. parse command line arguments.
#     2. define global variables.
#     3. Performs the processing according to the arguments.
#
# Arguments:
#     The command line arguments.
#
# Globals:
#     Define VERBOSE.
#
function main
{
    while getopts 'hv' OPTION
    do
        case "${OPTION}" in
            h)
                echo "${USAGE}"
                exit ${EXIT_STATUS_SUCCESS}
                ;;
            v)
                VERBOSE=true
                ;;
            *)
                echo "${USAGE}"
                exit ${EXIT_STATUS_INVALID_ARGUMENT}
                ;;
        esac
    done

    shift $((OPTIND - 1))

    if [[ $# -gt 1 ]]; then
        echo "illegal option(s) -- $@" >&2
        exit ${EXIT_STATUS_INVALID_ARGUMENT}
    fi

    : ${VERBOSE:=false}
    readonly VERBOSE

    generate_hash_value "${1:-.}"
    exit ${EXIT_STATUS_SUCCESS}
}

#
# Generates hash value of directory.
#
# Examples:
#     3727f5641d851ac05d2c90cfcbc2588b example
#
# Globals:
#     VERBOSE: if true print message verbosely. default false.
#
# Arguments:
#     $1: Target directory path. default is pwd.
#
function generate_hash_value
{
    local path="${1:-.}"
    local hash=$(md5sum <(generate_hash_source "${path}") | cut -d' ' -f1)

    echo "${hash} ${path}"

    if ${VERBOSE:-false}; then
        generate_hash_source "${path}"
    fi
}

#
# Generates lines to use for hash.
#
# Each line contains follow values.
#
#     HASH_VALUE PERMISSION PATH
#
# Examples:
#     8cf8463b34caa8ac871a52d5dd7ad1ef drwxr-xr-x .
#     c223e5fce39cc89525a4c0f2cb90bb1c drwxr-xr-x ./one
#     5aa740ecc1f9aca4c0dbcc87214fcf44 drwxr-xr-x ./two
#
# Arguments:
#     $1: Target directory path. default is pwd.
#
function generate_hash_source
{
    (
        local root_dir="${1:-.}"
        cd "${root_dir}"

        while read -r -d $'\0' path
        do
            if [[ -d "${path}" ]]; then
                local hash=$(cat <(echo "${path}") | md5sum | cut -d' ' -f1)
            else
                local hash=$(cat "${path}" | md5sum | cut -d' ' -f1)
            fi
            local permission=$(stat -c '%A' "${path}")
            echo "${hash} ${permission} ${path}"
        done < <(find . -print0 | sort -dz)
    )
}

main "$@"

